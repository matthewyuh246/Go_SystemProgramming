OSでは、システムコールを、ファイルディスクリプタと呼ばれるものに対して呼び出している

ファイルディスクリプタとはOSがカーネルのレイヤーで用意している抽象化の仕組み。
OSのカーネル内部のデータベースに、プロセスごとに実態が用意されています。
OSは、プロセスが起動されるとまず3つの疑似ファイルを作成し、それぞれにファイルディスクリプタを割り当てます。
0が標準入力、1が標準出力、2が標準エラー出力
以降は、そのプロセスでファイルをオープンしたりするたびに、1ずつ大きな数値が割り当てられる

ファイルディスクリプタ（File Descriptor）は、
**OSがファイルやソケットを識別するための番号（ID）**です。
ファイルディスクリプタ = ファイルや通信の「整理番号」

直接ファイルディスクリプタを指定してファイルのインスタンスを作り出す関数がある
file, err := os.NewFile(ファイルディスクリプタ, 名前)

OSとGo言語の抽象化について
OS:
プログラマはファイルディスクリプタで対象(ファイルやソケット)を指定し、システムコールを行う
                                        ↓
            OSのカーネルはファイルディスクリプタの参照表から対象を選び、処理を実行する
                                        ↓
                                プログラマは結果を受け取る

Go:
プログラマは各種構造体へのポインタで対象を指定し、メソッドを実行する
                            ↓
        Go言語はインターフェースの中から対象を選び、処理を実行する
                            ↓
                        結果を受け取る

HTTP/1.0 サーバは「レスポンスを返し終えたら接続を切る」
HTTP/1.1 デフォルトでキープアライブですが、このコードは HTTP/1.0 を使っているため、
         Connection: close ヘッダを明示しなくても接続終了することが多いです。


